name: CI (Dispatch • Go → ECR)

on:
  push:
    branches: [ main ]
    paths: [ 'dispatch/**', '.github/workflows/dispatch.yml' ]
  pull_request:
    branches: [ main ]
    paths: [ 'dispatch/**' ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: dispatch
  IMAGE_TAG: ${{ github.sha }}

permissions:
  contents: read
  actions: read

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # -------- Go build & test (module-safe) --------
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      # If go.mod is missing (simple repo), create it and tidy deps
      - name: Init/tidy Go module if missing
        working-directory: dispatch
        run: |
          if [ ! -f go.mod ]; then
            echo "No go.mod found -> initializing module 'dispatch'"
            go mod init dispatch
          fi
          go mod tidy

      - name: Vet
        working-directory: dispatch
        run: go vet ./...

      - name: Test
        working-directory: dispatch
        run: go test -v ./...

      # -------- Build & push Docker image to ECR --------
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${ECR_REPOSITORY}" --image-scanning-configuration scanOnPush=true

      - name: Build image
        env:
          REGISTRY: ${{ steps.ecr.outputs.registry }}
        run: |
          docker build \
            -t "${REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" \
            -t "${REGISTRY}/${ECR_REPOSITORY}:latest" \
            -f dispatch/Dockerfile dispatch

      # Optional smoke test (uncomment if you add /health)
      # - name: Smoke run
      #   env:
      #     REGISTRY: ${{ steps.ecr.outputs.registry }}
      #   run: |
      #     CID=$(docker run -d -p 18080:8080 "${REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}")
      #     sleep 3
      #     # curl -fsS http://localhost:18080/health
      #     docker logs "$CID" --tail 100 || true
      #     docker rm -f "$CID" >/dev/null

      - name: Push image
        env:
          REGISTRY: ${{ steps.ecr.outputs.registry }}
        run: |
          docker push "${REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          docker push "${REGISTRY}/${ECR_REPOSITORY}:latest"
