name: Build and Deploy Payment Service (Python)

on:
  push:
    branches: [ main ]
    paths:
      - 'payment/**'
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: payment
  IMAGE_TAG: ${{ github.sha }}

permissions:
  contents: read
  actions: read

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Python setup ----------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: |
            payment/requirements.txt

      - name: Install deps
        working-directory: payment
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
          # Optional dev tooling:
          pip install flake8

      - name: Lint (flake8)
        working-directory: payment
        run: |
          # Lint all .py files; tune ignores if needed
          flake8 --max-line-length=120 .

      # - name: Run tests (pytest)  # ← enable when you have tests
      #   working-directory: payment
      #   run: |
      #     pip install pytest coverage
      #     coverage run -m pytest
      #     coverage xml

      # ---------- AWS / ECR ----------
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${ECR_REPOSITORY}" --image-scanning-configuration scanOnPush=true

      # ---------- Build & Push image ----------
      - name: Build image
        env:
          REGISTRY: ${{ steps.ecr.outputs.registry }}
        run: |
          docker build \
            -t "${REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" \
            -t "${REGISTRY}/${ECR_REPOSITORY}:latest" \
            -f payment/Dockerfile payment

      # (Optional) quick smoke run — comment out if not needed
      # - name: Smoke run container
      #   env:
      #     REGISTRY: ${{ steps.ecr.outputs.registry }}
      #   run: |
      #     CID=$(docker run -d -p 18080:8080 "${REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}")
      #     sleep 5
      #     docker logs "$CID" --tail 200 || true
      #     docker rm -f "$CID" >/dev/null

      - name: Push image
        env:
          REGISTRY: ${{ steps.ecr.outputs.registry }}
        run: |
          docker push "${REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          docker push "${REGISTRY}/${ECR_REPOSITORY}:latest"

